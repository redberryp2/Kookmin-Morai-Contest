#include <ros/ros.h>
#include "std_msgs/Float64.h"
#include "local_pkg/PosPos.h"
#include "local_pkg/VescStateStamped.h"
#include "local_pkg/VescState.h"
#include "Lidar_pkg/pointCloud.h"
#include "Lidar_pkg/pointinfo.h"
#include "dh_pkg/cam_msg.h"
#include "morai_msgs/GetTrafficLightStatus.h"
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <fstream>
#include <string>
#include <memory>
#include <vector>
#include <cmath>

using namespace std;
ifstream path("/home/autonav/km_ws/src/code/map/final_map3.txt");
ifstream path2("/home/autonav/km_ws/src/code/map/final_map3_obs.txt");
ros::Subscriber gnss_sub_;
ros::Subscriber lidar_sub_;
ros::Subscriber cam_sub_;
ros::Subscriber traffic_sub_;
ros::Publisher speed_pub_;
ros::Publisher steer_pub_;
std_msgs::Float64 speed_msg_;
std_msgs::Float64 steer_msg_;
local_pkg::PosPos pos_msg_;
morai_msgs::GetTrafficLightStatus traf_msg_;

vector<vector<double>> Map_Data(6677,vector<double>(2,0));
vector<vector<double>> Obs_Map_Data(2833,vector<double>(2,0));
vector<double> My_Current_Point(2,0);
vector<double> My_Current_WayPoint(2,0);
vector<double> My_Current_WayPoint2(2,0);

//라이다 콜백 전역 변수
int size;
vector<vector<double>> Lidar_XYd, Lidar_Ymm,Lidar_ENU; 
//--------------

//카메라 콜백 전역 변수
bool Is_Dynamic_Obs = false;
bool Is_Dynamic_Obs_Flag = false;
int Is_Dynamic_Obs_Count = 0;
//---------------

int slam_cnt =0;
bool slam_flag =false;
bool obs_flag = false;
int obs_cnt = 0;
bool tmp_flag =false;
int tmp_cnt = 0;
bool lottari_stop_flag = false;
bool traffic_stop_flag = false;

bool Static_obs =false;
int Static_obs_cnt = 0;

bool line1 = false;
bool line2 = false;

bool slip_flag = false;
int slip_cnt=0;

double My_Current_Heading = 0;
int Min_Idx = 0;
int Min_Idx2 = 0;
double Delta;
float LD = 1.1;

void Flag_control()
{
    if(My_Current_Point[0] > 7.6 && My_Current_Point[0] < 10.9 && My_Current_Point[1] > 14.0 && My_Current_Point[1] < 18.2)
    {
        slam_flag =true;
    }

    if(Min_Idx >= 3790 && Min_Idx <= 3795)  //교차로
    {
        lottari_stop_flag = true;
    }
    if((Min_Idx > 1700 && Min_Idx < 1710) || (Min_Idx2 > 1980 && Min_Idx2 < 1991))
    {
        line1 = true;
        line2 = false;
    }
    if((Min_Idx > 2800)|| (Min_Idx2 > 2800))
    {
        line1 = true;
        line2 = false;
    }
}

void LIDARCallback(const Lidar_pkg::pointCloud::ConstPtr &msg)
{
    Lidar_XYd.clear();
    Lidar_Ymm.clear();
    Lidar_ENU.clear();
    size = msg -> size;
    if(obs_flag)
    {
        obs_cnt++;
    }
    if(obs_cnt % 20 ==0)
    {
        line1 = true;
        line2 = false;
    }
    
    if(size)  
    {
        obs_flag =true;
        Static_obs = true;
        Lidar_XYd.resize(size,vector<double>(3,0));
        Lidar_Ymm.resize(size,vector<double>(2,0));
        Lidar_ENU.resize(size,vector<double>(2,0));
        for(int i = 0 ; i < size; i++)
        {
            Lidar_XYd[i][0] = msg ->points[i].x;
            Lidar_XYd[i][1] = msg ->points[i].y;
            Lidar_XYd[i][2] = msg ->points[i].dist;
            Lidar_Ymm[i][0] = msg ->points[i].y_Max;
            Lidar_Ymm[i][1] = msg ->points[i].y_Min;

            Lidar_ENU[i][0] = My_Current_Point[0] + cos((90-My_Current_Heading)*M_PI/180) * Lidar_XYd[i][0] - sin((90-My_Current_Heading)*M_PI/180)*Lidar_XYd[i][1]; 
            Lidar_ENU[i][1] = My_Current_Point[1] + sin((90-My_Current_Heading)*M_PI/180) * Lidar_XYd[i][0] + cos((90-My_Current_Heading)*M_PI/180)*Lidar_XYd[i][1];
            // cout<<Lidar_ENU[i][0]<<"    "<<Lidar_ENU[i][1]<<endl;
        }
        // if((Min_Idx > 1086 && Min_Idx < 1796) || (Min_Idx2 > 1102 && Min_Idx2 < 1991))
        if((Min_Idx > 1086 && Min_Idx < 1796))
        {
            if(Lidar_ENU[0][0]>9.78)
            {
                line2 = true;
                line1 = false;
            }
            else if(Lidar_ENU[0][0] <9.78)
            {
                line1 = true;
                line2 = false;
            }
        }
        else if((Min_Idx > 1796 && Min_Idx < 2900))
        {
        if(Lidar_ENU[0][1] <37.7551)  //37.7551
        {
            line1 = true;
            line2 = false;
        }
        else if(Lidar_ENU[0][1] > 37.7551)
        {
            // cout<<"ddd"<<endl;
            line2 = true;
            line1 = false;
        }
        }    
    }
    else
    {
        Static_obs = false;
    }
    
}

void CAMCallback(const dh_pkg::cam_msg::ConstPtr &msg)
{
    Is_Dynamic_Obs = msg->is_dynamic_obs;

    if(Is_Dynamic_Obs == true)
    {
        Is_Dynamic_Obs_Flag = true;
    }
    // cout<<"미션: "<<Misson<<" 정지선 여부:"<<Is_Stop_Flag<<" 동적 여부:"<<Is_Dynamic_Obs<<" 미션 시간:"<<Mission_TIme<<endl;
}
    
void GNSSCallback(const local_pkg::PosPos::ConstPtr &msg)
{   
    My_Current_Point[0] = msg->PosX;
    My_Current_Point[1] = msg->PosY;
    // if(slip_cnt > 1)
    // {
    //     My_Current_Point[1] -= 0.05;
    //     cout<<"실행됨"<<endl;
    // }
    
    My_Current_Heading = msg->heading;
    My_Current_Heading = -My_Current_Heading ;

}

void TrafficCallback(const morai_msgs::GetTrafficLightStatus::ConstPtr &msg)
{
    string traffic_index = msg -> trafficLightIndex;
    int traffic_status = msg -> trafficLightStatus;
    if(traffic_index == "SN000005" && Min_Idx > 4448 && Min_Idx < 4500)
    {
        if(traffic_status == 33)
        {
            traffic_stop_flag =false;
        }
        else 
        {
            traffic_stop_flag =true;
        }
    }
}

void Find_Delta_1()
{
    float Min_Dist = int(1e9);
    for (int i = Min_Idx; i < Min_Idx + 100; i++ )
    {
        if (Min_Dist > sqrt(pow(Map_Data[i][0] - My_Current_Point[0], 2) + pow(Map_Data[i][1] - My_Current_Point[1], 2)))
        {
            Min_Dist = sqrt(pow(Map_Data[i][0] - My_Current_Point[0], 2) + pow(Map_Data[i][1] - My_Current_Point[1], 2));
            Min_Idx = i;
            
        }
    }
    for (int i = Min_Idx; i < Map_Data.size(); i++)
    {
        if (LD < sqrt(pow(Map_Data[i][0] - My_Current_Point[0], 2) + pow(Map_Data[i][1] - My_Current_Point[1], 2)))
        {
            My_Current_WayPoint[0] = Map_Data[i][0];
            My_Current_WayPoint[1] = Map_Data[i][1];
            break;
        }
    }

    double alpha = atan2(My_Current_WayPoint[0] - My_Current_Point[0], My_Current_WayPoint[1] - My_Current_Point[1]);
    alpha = alpha - My_Current_Heading / 180.0 * M_PI;
    Delta = atan2(2 * sin(alpha) * 0.38, LD);
    Delta = Delta * 90 /(19.5 * M_PI);
}

void Find_Delta_2()
{
    float Min_Dist = int(1e9);
    for (int i = Min_Idx2; i < Min_Idx2 + 100; i++ )
    {
        if (Min_Dist > sqrt(pow(Obs_Map_Data[i][0] - My_Current_Point[0], 2) + pow(Obs_Map_Data[i][1] - My_Current_Point[1], 2)))
        {
            Min_Dist = sqrt(pow(Obs_Map_Data[i][0] - My_Current_Point[0], 2) + pow(Obs_Map_Data[i][1] - My_Current_Point[1], 2));
            Min_Idx2 = i;  
        }
    }
    for (int i = Min_Idx2; i < Obs_Map_Data.size(); i++)
    {
        if (LD < sqrt(pow(Obs_Map_Data[i][0] - My_Current_Point[0], 2) + pow(Obs_Map_Data[i][1] - My_Current_Point[1], 2)))
        {
            My_Current_WayPoint2[0] = Obs_Map_Data[i][0];
            My_Current_WayPoint2[1] = Obs_Map_Data[i][1];
            break;
        }
    }

    double alpha = atan2(My_Current_WayPoint2[0] - My_Current_Point[0], My_Current_WayPoint2[1] - My_Current_Point[1]);
    alpha = alpha - My_Current_Heading / 180.0 * M_PI;
    Delta = atan2(2 * sin(alpha) * 0.38, LD);
    Delta = Delta * 90 /(19.5 * M_PI);
}



void action()
{
    if(tmp_flag)
    {
        tmp_cnt++;
        line1 = true;
        line2 = false;
        if(tmp_cnt > 100)
        {
            tmp_flag = false;
            tmp_cnt = 0;
        }
    }
    if(line2 == true && line1 == false && Min_Idx2 < 2700)
    {
        Find_Delta_2();
    }
    else if(line1 == true && line2 == false)
    {
        Find_Delta_1();
    }
    else{
        Find_Delta_1();
    }
    Flag_control();
    if(slam_flag)
    {
        speed_msg_.data =0;
        speed_pub_.publish(speed_msg_);

        if(slam_cnt ==0)
        {
           int result = std::system("/home/autonav/km_ws/src/code/src/kill_node.sh");
        }
        slam_cnt++;
        if(slam_cnt > 20)
        {
            slam_flag = false;
        }
    }
    if(slam_cnt > 19)
    {
        if(Static_obs == true && Min_Idx > 3000 && Min_Idx < 4100 && Lidar_XYd[0][0] > 0 && Lidar_XYd[0][0] < 1.3 && abs(Lidar_Ymm[0][0]) < 0.3)
        {
            if(Lidar_XYd[0][0] < 1) {
                speed_msg_.data = 0;
            }
            else {
                speed_msg_.data = 500;
            }
            steer_msg_.data = Delta+0.5;
        }   
        else if(traffic_stop_flag == true)
        {
            speed_msg_.data = 0 ;
        }
        else if(Is_Dynamic_Obs_Flag == true)
        {
            Is_Dynamic_Obs_Count += 1;
            if(Is_Dynamic_Obs_Count > 1)
            {
                tmp_flag = true;
            }

            speed_msg_.data = 100;
            if(Is_Dynamic_Obs_Count >20)
            {
                Is_Dynamic_Obs_Flag = false;
                Is_Dynamic_Obs_Count = 0;
            }
            // if(speed_msg_.data == 0)
            // {
            //     slip_flag = true;
            // }
            // if(slip_flag ==true)
            // {
            //     slip_cnt = slip_cnt + 1;
            // }
        }

        else
        {
            speed_msg_.data = 1600;
            steer_msg_.data = Delta+0.5;
            if(Min_Idx >= 3780 && Min_Idx <= 4050)
            {
                speed_msg_.data = 700;
            }
        }
        speed_pub_.publish(speed_msg_);
        steer_pub_.publish(steer_msg_);
    }
}


void Load_Map()
{
    for (int i = 0; i < 6677; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            if(j == 1)
            {
            path >> Map_Data[i][j];
            Map_Data[i][j] = Map_Data[i][j];


            }
            else{
            path >> Map_Data[i][j];
            }
        }
    }
    for (int i = 0; i < 2833; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            path2 >> Obs_Map_Data[i][j];
            
        }
    }
}

int main(int argc, char** argv)
{
    Load_Map();
    ros::init(argc, argv, "Control_Node");
    ros::NodeHandle nh;
    gnss_sub_ = nh.subscribe<local_pkg::PosPos>("/PosCal", 10, GNSSCallback);
    lidar_sub_ = nh.subscribe<Lidar_pkg::pointCloud>("/custom_cluster_info", 10, LIDARCallback);
    cam_sub_ = nh.subscribe<dh_pkg::cam_msg>("/Cam_dectection", 10, CAMCallback);
    traffic_sub_ = nh.subscribe<morai_msgs::GetTrafficLightStatus>("/GetTrafficLightStatus", 10, TrafficCallback);
    speed_pub_ = nh.advertise<std_msgs::Float64>("/commands/motor/speed", 10);  
    steer_pub_ = nh.advertise<std_msgs::Float64>("/commands/servo/position", 10); 
    ros::Rate rate1(50);  
    while (ros::ok())
    {
        ros::spinOnce();
        action();
        rate1.sleep();
    }
    return 0;
}
  